abline(v = mean(chickwts$weight), lwd = 2, lty = 2)
abline(v = 280, lwd = 2, lty = 2, col = "red")
legend("topright", c("True Mean = 261.3", "H0 Mean = 280"), lwd = 2,
lty = 2, col = c("black", "red"))
boxplot(chickwts$weight, main = "Overall Distribution of Chick Weights")
abline(h = mean(chickwts$weight), lwd = 2, lty = 2)
abline(h = 280, lwd = 2, lty = 2, col = "red")
legend("topright", c("True Mean = 261.3", "H0 Mean = 280"), lwd = 2,
lty = 2, col = c("black", "red"))
t.test(chickwts$weight, mu = 280, alternative = "less")
boxplot(chickwts$weight ~ chickwts$feed,
col = c("red", "orange", "yellow", "green", "blue", "violet"),
main = "Distribution of Chick Weights\nfor Various Feed Types")
summary(aov(chickwts$weight ~ chickwts$feed))
#We are specifically interested in the casein and meatmeal diet types. Do the
#reported chick weights have the same variance? To determine, conduct an F-test:
var.test(chickwts$weight[chickwts$feed == "casein"],
chickwts$weight[chickwts$feed == "meatmeal"],
alternative = "two.sided")
#The p-value for this test is 0.9739 meaning that, under the null hypothesis, we
#The p-value for this test is 0.9739 meaning that, under the null hypothesis, we
#would expect to see results at least as extreme as ours about 97.39% of the time.
#The p-value for this test is 0.9739 meaning that, under the null hypothesis, we
#would expect to see results at least as extreme as ours about 97.39% of the time.
#Thus, our data does not support the alternative hypothesis that the variance among
#The p-value for this test is 0.9739 meaning that, under the null hypothesis, we
#would expect to see results at least as extreme as ours about 97.39% of the time.
#Thus, our data does not support the alternative hypothesis that the variance among
#chick weights is different for the casein and meatmeal diet groups.
#The p-value for this test is 0.9739 meaning that, under the null hypothesis, we
#would expect to see results at least as extreme as ours about 97.39% of the time.
#Thus, our data does not support the alternative hypothesis that the variance among
#chick weights is different for the casein and meatmeal diet groups.
#The p-value for this test is 0.9739 meaning that, under the null hypothesis, we
#would expect to see results at least as extreme as ours about 97.39% of the time.
#Thus, our data does not support the alternative hypothesis that the variance among
#chick weights is different for the casein and meatmeal diet groups.
#The p-value for this test is 0.9739 meaning that, under the null hypothesis, we
#would expect to see results at least as extreme as ours about 97.39% of the time.
#Thus, our data does not support the alternative hypothesis that the variance among
#chick weights is different for the casein and meatmeal diet groups.
#The p-value for this test is 0.9739 meaning that, under the null hypothesis, we
#would expect to see results at least as extreme as ours about 97.39% of the time.
#Thus, our data does not support the alternative hypothesis that the variance among
#chick weights is different for the casein and meatmeal diet groups.
#The p-value for this test is 0.9739 meaning that, under the null hypothesis, we
#would expect to see results at least as extreme as ours about 97.39% of the time.
#Thus, our data does not support the alternative hypothesis that the variance among
#chick weights is different for the casein and meatmeal diet groups.
quiz.data
is
chisq.test(quiz.data) #Conducting the X^2 test of independence data on the quiz
##################################
#####X^2 Test of Independence#####
##################################
quiz.data = matrix(c(44, 21, 12, 18), nrow = 2, ncol = 2, byrow = TRUE)
dimnames(quiz.data) = list(Attendance = c("Present", "Absent"),
Grade = c("Pass", "Fail"))
chisq.test(quiz.data) #Conducting the X^2 test of independence data on the quiz
quiz.data
##################################
#####X^2 Test of Independence#####
##################################
quiz.data = matrix(c(44, 21, 12, 18), nrow = 2, ncol = 2, byrow = TRUE)
quiz.dat
quiz.data
) =
dimnames(quiz.data) = list(Attendance = c("Present", "Absent"),
Grade = c("Pass", "Fail"))
quiz.dat
a
quiz.data
?chisq.test
chisq.test(quiz.data) #Conducting the X^2 test of independence data on the quiz
chisq.test(quiz.data) #Conducting the X^2 test of independence data on the quiz
########################################
#####Chick Weight Data Set Examples#####
########################################
library(datasets) #Load the base R datasets library.
help(chickwts) #See the help documentation for the chickwts dataset to see a
chickwts #Visually inspect the data.
summary(chickwts) #Returns the five-number summary, along with the mean,
sd(chickwts$weight) #Returns the standard deviation of the weight variable.
var(chickwts$weight) #Returns the variance of the weight variable.
table(chickwts) #Returns a contingency table of weight and feed.
plot(density(chickwts$weight), main = "Overall Distribution of Chick Weights")
abline(v = mean(chickwts$weight), lwd = 2, lty = 2)
abline(v = 280, lwd = 2, lty = 2, col = "red")
legend("topright", c("True Mean = 261.3", "H0 Mean = 280"), lwd = 2,
lty = 2, col = c("black", "red"))
boxplot(chickwts$weight, main = "Overall Distribution of Chick Weights")
abline(h = mean(chickwts$weight), lwd = 2, lty = 2)
abline(h = 280, lwd = 2, lty = 2, col = "red")
legend("topright", c("True Mean = 261.3", "H0 Mean = 280"), lwd = 2,
lty = 2, col = c("black", "red"))
t.test(chickwts$weight, mu = 280, alternative = "less")
boxplot(chickwts$weight ~ chickwts$feed,
col = c("red", "orange", "yellow", "green", "blue", "violet"),
main = "Distribution of Chick Weights\nfor Various Feed Types")
summary(aov(chickwts$weight ~ chickwts$feed))
#We are specifically interested in the casein and meatmeal diet types. Do the
#reported chick weights have the same variance? To determine, conduct an F-test:
var.test(chickwts$weight[chickwts$feed == "casein"],
chickwts$weight[chickwts$feed == "meatmeal"],
alternative = "two.sided")
#The p-value for this test is 0.9739 meaning that, under the null hypothesis, we
#The p-value for this test is 0.9739 meaning that, under the null hypothesis, we
#would expect to see results at least as extreme as ours about 97.39% of the time.
#The p-value for this test is 0.9739 meaning that, under the null hypothesis, we
#would expect to see results at least as extreme as ours about 97.39% of the time.
#Thus, our data does not support the alternative hypothesis that the variance among
#The p-value for this test is 0.9739 meaning that, under the null hypothesis, we
#would expect to see results at least as extreme as ours about 97.39% of the time.
#Thus, our data does not support the alternative hypothesis that the variance among
#chick weights is different for the casein and meatmeal diet groups.
#The p-value for this test is 0.9739 meaning that, under the null hypothesis, we
#would expect to see results at least as extreme as ours about 97.39% of the time.
#Thus, our data does not support the alternative hypothesis that the variance among
#chick weights is different for the casein and meatmeal diet groups.
#The p-value for this test is 0.9739 meaning that, under the null hypothesis, we
#would expect to see results at least as extreme as ours about 97.39% of the time.
#Thus, our data does not support the alternative hypothesis that the variance among
#chick weights is different for the casein and meatmeal diet groups.
#The p-value for this test is 0.9739 meaning that, under the null hypothesis, we
#would expect to see results at least as extreme as ours about 97.39% of the time.
#Thus, our data does not support the alternative hypothesis that the variance among
#chick weights is different for the casein and meatmeal diet groups.
#The p-value for this test is 0.9739 meaning that, under the null hypothesis, we
#would expect to see results at least as extreme as ours about 97.39% of the time.
#Thus, our data does not support the alternative hypothesis that the variance among
#chick weights is different for the casein and meatmeal diet groups.
#The p-value for this test is 0.9739 meaning that, under the null hypothesis, we
#would expect to see results at least as extreme as ours about 97.39% of the time.
#Thus, our data does not support the alternative hypothesis that the variance among
#chick weights is different for the casein and meatmeal diet groups.
#The p-value for this test is 0.9739 meaning that, under the null hypothesis, we
#would expect to see results at least as extreme as ours about 97.39% of the time.
#Thus, our data does not support the alternative hypothesis that the variance among
#chick weights is different for the casein and meatmeal diet groups.
#The p-value for this test is 0.9739 meaning that, under the null hypothesis, we
#would expect to see results at least as extreme as ours about 97.39% of the time.
#Thus, our data does not support the alternative hypothesis that the variance among
#chick weights is different for the casein and meatmeal diet groups.
#The p-value for this test is 0.9739 meaning that, under the null hypothesis, we
#would expect to see results at least as extreme as ours about 97.39% of the time.
#Thus, our data does not support the alternative hypothesis that the variance among
#chick weights is different for the casein and meatmeal diet groups.
asd
#The p-value for this test is 0.9739 meaning that, under the null hypothesis, we
#would expect to see results at least as extreme as ours about 97.39% of the time.
#Thus, our data does not support the alternative hypothesis that the variance among
#chick weights is different for the casein and meatmeal diet groups.
##############################################
#####Manual example with the cars dataset#####
##############################################
help(cars)
cars #Investigating the cars dataset.
##############################################
#####Manual example with the cars dataset#####
##############################################
help(cars)
cars #Investigating the cars dataset.
#Basic numerical EDA for cars dataset.
summary(cars) #Five number summaries.
sapply(cars, sd) #Standard deviations.
cars[,1]
cars[,2]
cars[1,]
cars[1,123]
cls
clear
sapply(cars, sd) #Standard deviations.
cor(cars) #Correlations.
#Basic graphical EDA for cars dataset.
hist(cars$speed, xlab = "Speed in MPH", main = "Histogram of Speed")
hist(cars$dist, xlab = "Distance in Feet", main = "Histogram of Distance")
#Basic graphical EDA for cars dataset.
hist(cars$speed, xlab = "Speed in MPH", main = "Histogram of Speed")
hist(cars$dist, xlab = "Distance in Feet", main = "Histogram of Distance")
plot(cars, xlab = "Speed in MPH", ylab = "Distance in Feet",
main = "Scatterplot of Cars Dataset")
#Basic graphical EDA for cars dataset.
hist(cars$speed, xlab = "Speed in MPH", main = "Histogram of Speed")
hist(cars$dist, xlab = "Distance in Feet", main = "Histogram of Distance")
plot(cars, xlab = "Speed in MPH", ylab = "Distance in Feet",
main = "Scatterplot of Cars Dataset")
#Manual calculation of simple linear regression coefficients.
beta1 = sum((cars$speed - mean(cars$speed)) * (cars$dist - mean(cars$dist))) /
sum((cars$speed - mean(cars$speed))^2)
beta0 = mean(cars$dist) - beta1*mean(cars$speed)
#Adding the least squares regression line to the plot.
abline(beta0, beta1, lty = 2)
#Adding the least squares regression line to the plot.
abline(beta0, beta1, lty = 2)
#Calculating the residual values.
residuals = cars$dist - (beta0 + beta1*cars$speed)
#Note the sum of the residuals is 0.
sum(residuals)
mean(residuals)
?abline
#Adding the least squares regression line to the plot.
abline(beta0, beta1, lty = 2)
#################################################
#####Automatic example with the cars dataset#####
#################################################
model = lm(dist ~ speed, data = cars) #Use the linear model function lm() to
summary(model) #All the summary information for the model in question. Reports:
summary(model) #All the summary information for the model in question. Reports:
#Notice that the F-statistic value for the overall regression is the same as the
#square of the t-statistic value for the speed coefficient:
t.statistic = 9.464
f.statistic = 89.57
t.statistic^2
confint(model) #Creating 95% confidence intervals for the model coefficients.
library(dplyr)
library(ggplot2)
library(data.table)
setwd("C:/Users/jackc/OneDrive/Desktop/data_science_bootcamp/R Project")
emissions <- fread("./CO2_Emissions.csv")
emissions
View(emissions)
emissions <- fread("./CO2_Emissions.csv", header=FALSE)
View(emissions)
emissions <- fread("./CO2_Emissions.csv", header=T)
View(emissions)
g = ggplot(data = emissions)
g+ geom_point()
g+ geom_point(aes(x = 2018, y = Country Name))
g = ggplot(data = emissions, aes(x = "2018", y = "Country Name"))
g+ geom_point()
g = ggplot(data = emissions, aes(x = 2018, y = "Country Name"))
g+ geom_point()
emissions_by_country= emissions %>% group_by(country_name)
emissions = emissions %>% rename(
Country Name = country_name
)
emissions = emissions %>% rename(
"Country Name" = country_name)
emissions = emissions %>% rename(
emissions["Country Name"] = country_name)
rename(emissions, replace( = c("Country Name" , 'country_name')))
rename(emissions, replace = c("Country Name" , 'country_name')))
rename(emissions, replace = c("Country Name" , 'country_name'))
rename(emissions, replace = c("Country Name" = 'country_name'))
emissions <- fread("./CO2_Emissions.csv", header=T)
?pivot_table
?long_pivot
?pivot
?>pivot
??pivot
pivot_longer(emissions)
library(tidyr)
pivot_longer(emissions)
pivot_longer(emissions, country_name)
x = pivot_longer(emissions, country_name)
x
View(x)
x = pivot_longer(emissions, country_name, 1960,1961)
View(x)
x = pivot_longer(emissions, names_to = 'country_name' , values_to = 'emissions')
emissions %>%
pivot_longer(emissions, names_to = 'country_name' , values_to = 'emissions')
x = emissions %>%
pivot_longer(emissions, names_to = 'country_name' , values_to = 'emissions')
View(x)
y = emissions %>%
pivot_longer(emissions, names_to = 'country_name' , values_to = 'emissions')
View(x)
View(y)
View(y)
y = emissions %>%
pivot_longer(emissions, names_to = 'country_name' , values_to = 'emissions')
View(y)
emissions %>%
pivot_longer(emissions, names_to = 'country_name' , values_to = 'emissions')
emissions %>%
pivot_longer(emissions, names_to = 'country_name' , values_to = 'emissions')
emissions %>%
pivot_longer(emissions, names_to = 'country_name' , values_to = 'emissions')
emissions %>%
pivot_longer(!emissions, names_to = 'country_name' , values_to = 'emissions')
emissions %>%
pivot_longer(!emissions)
x = emissions %>%
pivot_longer(!emissions)
x = emissions %>%
pivot_longer(!emissions)
View(x)
x = emissions %>%
pivot_longer(cols = starts_with('19'), names_to = 'year' , values_to = 'emission')
x
View(x)
x = emissions %>%
pivot_longer(cols = (starts_with('19') || starts_with('20')), names_to = 'year' , values_to = 'emission')
x = emissions %>%
pivot_longer(cols = (starts_with('19') | starts_with('20')), names_to = 'year' , values_to = 'emission')
View(x)
g = ggplot(data = x, aes(x = year, y = emission))
g = ggplot(data = x, aes(x = year, y = emission))
g+ geom_point()
g = ggplot(data = x, aes(x = year, y = sum(emission)))
g+ geom_point()
View(x)
x %>% group_by(year)
g = ggplot(data = x, aes(x = year, y = emission))
g+ geom_point()
g+ geom_bar()
g+ geom_point(stat = 'identity')
x = emissions %>%
pivot_longer(cols = (starts_with('19') | starts_with('20')), names_to = 'year' , values_to = 'emission') %>%
pivot_longer(cols = year, names_to = 'country')
View(x)
x = emissions %>%
pivot_longer(cols = (starts_with('19') | starts_with('20')), names_to = 'year' , values_to = 'emission') #%>%
View(x)
pivot_longer(cols = country_name, names_to = 'country')
x = emissions %>%
pivot_longer(cols = (starts_with('19') | starts_with('20')), names_to = 'year' , values_to = 'emission') %>%
pivot_longer(cols = country_name, names_to = 'country')
View(x)
x = emissions %>%
pivot_longer(cols = (starts_with('19') | starts_with('20')), names_to = 'year' , values_to = 'emission') %>%
pivot_longer(cols = country_name, names_to = 'country', values_to = 'country')
View(x)
x = emissions %>%
pivot_longer(cols = (starts_with('19') | starts_with('20')), names_to = 'year' , values_to = 'emission') %>%
pivot_longer(cols = country_name, values_to = 'country')
View(x)
g = ggplot(data = x, aes(x = year, y = emission))
g+ geom_point(stat = 'identity')
g+ geom_bar(aes(y = emission),stat = 'identity')
?filter
library(data.table)
library(dplyr)
?filter
x = emissions %>%
pivot_longer(cols = (starts_with('19') | starts_with('20')), names_to = 'year' , values_to = 'emission') %>%
pivot_longer(cols = country_name, values_to = 'country') %>%
filter(year == 2019)
g = ggplot(data = x, aes(x = year,))
g+ geom_bar(aes(y = emission),stat = 'identity')
View(x)
x = emissions %>%
pivot_longer(cols = (starts_with('19') | starts_with('20')), names_to = 'year' , values_to = 'emission') %>%
pivot_longer(cols = country_name, values_to = 'country') %>%
filter(year == 2018)
View(x)
g = ggplot(data = x, aes(x = year,))
g+ geom_bar(aes(y = emission),stat = 'identity')
sum(x$emission)
sum(x$emission)
sum(x)
sum(x$emission)
sum(x$emission, na.rm = T)
x = emissions %>%
pivot_longer(cols = (starts_with('19') | starts_with('20')), names_to = 'year' , values_to = 'emission') %>%
pivot_longer(cols = country_name, values_to = 'country')# %>%
g = ggplot(data = x, aes(x = year,))
g+ geom_bar(aes(y = emission),stat = 'identity')
filter(year == 1977)
View(x)
x = emissions %>%
pivot_longer(cols = (starts_with('19') | starts_with('20')), names_to = 'year' , values_to = 'emission') %>%
pivot_longer(cols = country_name, values_to = 'country') %>%
filter(year == 1977)
sum(x$emission, na.rm = T)
emissions <- fread("./co2_emissions", header=T)
emissions <- fread("./co2_emissions", header=T)
x = emissions %>%
pivot_longer(cols = (starts_with('19') | starts_with('20')), names_to = 'year' , values_to = 'emission') %>%
pivot_longer(cols = country_name, values_to = 'country') %>%
filter(year == 1977)
View(x)
View(emissions)
emissions <- fread("./co2_emissions", header=T)
library(dplyr)
library(ggplot2)
library(data.table)
library(tidyr)
emissions <- fread("./co2_emissions", header=T)
emissions <- fread("./co2_emissions.csv", header=T)
View(emissions)
emissions <- fread("./co2_emissions.csv", header=T)
View(emissions)
x = emissions %>%
pivot_longer(cols = (starts_with('19') | starts_with('20')), names_to = 'year' , values_to = 'emission') %>%
pivot_longer(cols = country_name, values_to = 'country')
View(x)
g = ggplot(data = x, aes(x = year,))
g+ geom_bar(aes(y = emission),stat = 'identity')
scale_x_discrete(name = "Year", limits = c('1960','1970','1980','1990','2000','2010','2018')
g = ggplot(data = x, aes(x = year,))
g+ geom_bar(aes(y = emission),stat = 'identity') +
scale_x_discrete(name = "Year", limits = c('1960','1970','1980','1990','2000','2010','2018')
g+ geom_bar(aes(y = emission),stat = 'identity') +
scale_x_discrete(name = "Year", limits = c('1960','1970','1980','1990','2000','2010','2018'))
+
scale_x_discrete(name = "Year", limits = c('1960','1970','1980','1990','2000','2010','2018'))
g+ geom_bar(aes(y = emission),stat = 'identity') +
scale_x_discrete(name = "Year", limits = c('1960','1970','1980','1990','2000','2010','2018'))
g+ geom_bar(aes(y = emission),stat = 'identity') +
scale_x_discrete(name = "Year", limits = c('1960','1965', '1970',
'1975', '1980','1985' ,'1990',
'1995', '2000','2005','2010','2018'))
g+ geom_bar(aes(y = emission),stat = 'identity') +
scale_y_discrete(name = 'CO2 Emissions (kt)')
g+ geom_bar(aes(y = emission),stat = 'identity') +
scale_y_discrete(name = 'CO2 Emissions (kt)')+
scale_x_discrete(name = "Year", limits = c('1960','1965', '1970',
'1975', '1980','1985' ,'1990',
'1995', '2000','2005','2010','2018'))
g = ggplot(data = x, aes(x = year, color= country_name))
g+ geom_bar(aes(y = emission),stat = 'identity') +
scale_y_discrete(name = 'CO2 Emissions (kt)')+
scale_x_discrete(name = "Year", limits = c('1960','1965', '1970',
'1975', '1980','1985' ,'1990',
'1995', '2000','2005','2010','2018'))
g = ggplot(data = x, aes(x = year, color= country))
g+ geom_bar(aes(y = emission),stat = 'identity') +
scale_y_discrete(name = 'CO2 Emissions (kt)')+
scale_x_discrete(name = "Year", limits = c('1960','1965', '1970',
'1975', '1980','1985' ,'1990',
'1995', '2000','2005','2010','2018'))
g = ggplot(data = x, aes(x = year))
g+ geom_bar(aes(y = emission),stat = 'identity') +
scale_y_discrete(name = 'CO2 Emissions (kt)')+
scale_x_discrete(name = "Year", limits = c('1960','1965', '1970',
'1975', '1980','1985' ,'1990',
'1995', '2000','2005','2010','2018'))
g+ geom_boxplot(aes(y = emission) , stat='identity')
histogram_1970 = emissions %>%
pivot_longer(cols = (starts_with('19') | starts_with('20')), names_to = 'year' , values_to = 'emission') %>%
pivot_longer(cols = country_name, values_to = 'country') %>%
filter(year = '1970')
histogram_1970 = emissions %>%
pivot_longer(cols = (starts_with('19') | starts_with('20')), names_to = 'year' , values_to = 'emission') %>%
pivot_longer(cols = country_name, values_to = 'country') %>%
filter(year == '1970')
histogram_1970 = emissions %>%
pivot_longer(cols = (starts_with('19') | starts_with('20')), names_to = 'year' , values_to = 'emission') %>%
pivot_longer(cols = country_name, values_to = 'country') %>%
filter(year == '1970')
View(histogram_1970)
hist+geom_histogram()
hist = ggplot(data = histogram_1970, aes(country))
hist+geom_histogram()
hist = ggplot(data = histogram_1970, aes(emission))
hist+geom_histogram()
histogram_2018 = emissions %>%
pivot_longer(cols = (starts_with('19') | starts_with('20')), names_to = 'year' , values_to = 'emission') %>%
pivot_longer(cols = country_name, values_to = 'country') %>%
filter(year == '2018')
hist2 = ggplot(data = histogram_2018, aes(emission))
hist+geom_histogram()
hist2 = ggplot(data = histogram_2018, aes(emission))
hist+geom_histogram()
hist = ggplot(data = histogram_1970, aes(emission))
hist+geom_histogram()
hist2 = ggplot(data = histogram_2018, aes(emission))
hist+geom_histogram()
hist2 = ggplot(data = na.omit(histogram_2018), aes(emission))
hist+geom_histogram()
hist2 = ggplot(data = histogram_2018, aes(emission))
hist+geom_histogram()
hist+geom_histogram()
hist = ggplot(data = histogram_1970, aes(emission))
hist+geom_histogram()
hist2+geom_histogram()
hist2 = ggplot(data = histogram_2018, aes(emission))
hist2+geom_histogram()
hist = ggplot(data = histogram_1970, aes(emission))
hist+geom_histogram()
hist2 = ggplot(data = histogram_2018, aes(emission))
hist2+geom_histogram()
shiny::runApp('Example shiny Code')
dashboardPage(
dashboardHeader(),
dashboardSidebar(),
dashboardBody()
)
library(shinydashboard)
dashboardPage(
dashboardHeader(),
dashboardSidebar(),
dashboardBody()
)
dashboardPage(
dashboardHeader(),
dashboardSidebar(),
dashboardBody()
)
install.packages('shinydashboard')
dashboardPage(
dashboardHeader(),
dashboardSidebar(),
dashboardBody()
)
install.packages("shinydashboard")
dashboardPage(
dashboardHeader(),
dashboardSidebar(),
dashboardBody()
)
library(shinydashboard)
dashboardPage(
dashboardHeader(),
dashboardSidebar(),
dashboardBody()
)
shiny::runApp()
runApp()
runApp()
